// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/knotidx.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Knotidx_GetKeys_FullMethodName  = "/knotidx/GetKeys"
	Knotidx_Reload_FullMethodName   = "/knotidx/Reload"
	Knotidx_Shutdown_FullMethodName = "/knotidx/Shutdown"
)

// KnotidxClient is the client API for Knotidx service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KnotidxClient interface {
	GetKeys(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Reload(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	Shutdown(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type knotidxClient struct {
	cc grpc.ClientConnInterface
}

func NewKnotidxClient(cc grpc.ClientConnInterface) KnotidxClient {
	return &knotidxClient{cc}
}

func (c *knotidxClient) GetKeys(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, Knotidx_GetKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knotidxClient) Reload(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, Knotidx_Reload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knotidxClient) Shutdown(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, Knotidx_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnotidxServer is the server API for Knotidx service.
// All implementations must embed UnimplementedKnotidxServer
// for forward compatibility
type KnotidxServer interface {
	GetKeys(context.Context, *SearchRequest) (*SearchResponse, error)
	Reload(context.Context, *EmptyRequest) (*EmptyResponse, error)
	Shutdown(context.Context, *EmptyRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedKnotidxServer()
}

// UnimplementedKnotidxServer must be embedded to have forward compatible implementations.
type UnimplementedKnotidxServer struct {
}

func (UnimplementedKnotidxServer) GetKeys(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeys not implemented")
}
func (UnimplementedKnotidxServer) Reload(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedKnotidxServer) Shutdown(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedKnotidxServer) mustEmbedUnimplementedKnotidxServer() {}

// UnsafeKnotidxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KnotidxServer will
// result in compilation errors.
type UnsafeKnotidxServer interface {
	mustEmbedUnimplementedKnotidxServer()
}

func RegisterKnotidxServer(s grpc.ServiceRegistrar, srv KnotidxServer) {
	s.RegisterService(&Knotidx_ServiceDesc, srv)
}

func _Knotidx_GetKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnotidxServer).GetKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knotidx_GetKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnotidxServer).GetKeys(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knotidx_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnotidxServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knotidx_Reload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnotidxServer).Reload(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knotidx_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnotidxServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knotidx_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnotidxServer).Shutdown(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Knotidx_ServiceDesc is the grpc.ServiceDesc for Knotidx service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Knotidx_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "knotidx",
	HandlerType: (*KnotidxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeys",
			Handler:    _Knotidx_GetKeys_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _Knotidx_Reload_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Knotidx_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/knotidx.proto",
}
